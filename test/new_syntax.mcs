// This is a quick demo/tutorial file

// Declare a namespace
@!namespace: myNamespace

// This is the root, it's not inside any group or function

// Groups are used to create folders in the path (namespace:group/function)
group myFolder {

	// Functions get separated into files, this would be myFunction.mcfunction
	function myFunction {

		// Unparsed comments (get removed) can be anywhere
		# Parsed comments (get added to final function file) cannot be in root

		// Normal minecraft commands
		say hello world;

		// Variables (contains a string)
		var $stringVar = "a string var";

		// Variable with a number
		var $numberVar = 3.1415;

		// Variable with a boolean
		var $boolVar = true;

		// Variable with arrays (of any type)
		var $arrVar = [15, "test", false];

		// Use a variable by preceding its name with $
		$numberVar = 3;

		// Arrays can be accessed like so
		$arrVar[1]; // Returns "test" (index starts at 0)

		// You can add or set index elements like so
		$arrVar[3] = 20;

		// You can concatenate (add) strings
		var $another = $stringVar + " something else";

		// You can also use an eval block, to use variables inside strings/quotation marks using ``
		tellraw @a {"text":"this is an eval block -> `return $stringVar`"};
		// will become tellraw @a {"text":"this is an eval block -> a string var"}

		// If statements
		if ($numberVar < 4) {
			say Number is less than 4;
		}
		// Else if statements
		else if ($numberVar == 4) {
		    say Number is equal to 4;
		}
		// Else
		else {
		   say Number is greater than 4;
		};

		// If you want to use a reserved keyword in your commands, put quotes around it
		say "for" loop;
		// will become say for loop

		// For loops, from 0->3 inclusive
		for(var $i = 0; $i < 4; $i = $i + 1) {
			// This will say "Num 0", "Num 1", "Num 2", "Num 3"
			say Num $i;
		};

		say "foreach" loop;

		// Or you can do the same thing with a foreach loop
		foreach (var $j in range(0,3)) {
			// This will say "Num 0", "Num 1", "Num 2", "Num3"
			say Num $j;
		};

		// Execute block (adds the execute prefix to any command inside its { } )
		execute @a ~ ~ ~ {
			// Will become "execute @a ~ ~ ~ say Hello World"
			say Hello World;
		};

		// Calling another function (just like you would with commands)
		function myNamespace:callAMacro if @a[score_hello=1];
	};
};

// Macros allow you to write similar commands more quickly
macro aMacro ($parameter1, $parameter2) {

	// This will prepend normal commands in the line before the call to "aMacro()"
	tellraw $parameter1 {"text":"Hello, my name is `return $parameter2`."};


	// This is the value that will replace any call to "aMacro()"
	return 5;
};

// A function to demonstrate macros
function callAMacro {

	// You can also make variables with selectors or relative positions
	var $selector = @a[score_hello_min=1];

	// Call a macro and add its return value as a new line
	var $hey = aMacro($selector, "John");
	say $hey;

	// This will compile into
	// tellraw @a[score_hello_min=1] {"text":"Hello, my name is John."}
	// say 5;

};

// This function shows the changes from the latest version
function changes {
	// Changes from v2.2.0

	// New Exponent/Power operator
	var $exponent = 3;
	var $base = 2;

	// 2 to the power of 3 is 8
	var $result = 2 ^ 3;

	// say 8
	say $result;

	// Changes from v2.1.0

	// Execute as normal command
	execute @a ~ ~ ~ say hello world;

	var $someVal = 5;

	// Selectors can evaluate their content
	var $selector = @a[some_score=$someVal];

	// Relatives can evaluate their content
	var $rel = ~$someVal;

	say $selector;

	say $rel;
}
